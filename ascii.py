from PIL import Image
import argparse
import os
import time
import cv2


# Returns matrix of greyscale pixel brightness values
def luminosity_brightness(image):
    brightness_matrix = [[None for _ in range(image.width)] for _ in range(image.height)]

    for y in range(len(brightness_matrix)):
        for x in range(len(brightness_matrix[0])):
            brightness_matrix[y][x] = image.getpixel((x, y))
            #print(brightness_matrix[y][x])

    return brightness_matrix



# Returns the a matrix of average pixel brightness values
def averaged_brightness(image):
    # Average pixel brightness calculated by: (R + G + B) / 3
    brightness_matrix = [[None for _ in range(image.width)] for _ in range(image.height)]

    for y in range(len(brightness_matrix)):
        for x in range(len(brightness_matrix[0])):
            R = (image.getpixel((x, y)))[0]
            G = (image.getpixel((x, y)))[1]
            B = (image.getpixel((x, y)))[2]
            average = (R + G + B) / 3
            brightness_matrix[y][x] = average

    return brightness_matrix


# Returns ascii matrix generated by mapping brightness values to corresponding ascii character
def map_to_ascii(brightness_matrix, strategy, mode=None):
    CHARS_LIGHT = [' ', ' ', '.', ':', '!', '+', '*', 'e', '$', '@', '8']
    CHARS_FILLED = ['░', '▒', '▓', '█']
    CHARS_COLOR = ['.', '*', 'e', 's', '@']

    if strategy == "filled-ascii":
        char_set = CHARS_FILLED
    elif strategy == "just-ascii":
        char_set = CHARS_LIGHT
    else:
        char_set = CHARS_COLOR

    ascii_matrix = [[None for _ in range(len(brightness_matrix[0]))] for _ in
                    range(len(brightness_matrix))]

    if mode is None:
        # Map brightness to ascii character
        for y in range(len(brightness_matrix)):
            for x in range(len(brightness_matrix[0])):
                index = int((brightness_matrix[y][x] * (len(char_set) - 1)) // 255)
                ascii_matrix[y][x] = char_set[index]
    else:
        # Invert brightness
        for y in range(len(brightness_matrix)):
            for x in range(len(brightness_matrix[0])):
                index = int((brightness_matrix[y][x] * (len(char_set) - 1)) // 255)
                ascii_matrix[y][x] = char_set[index]

    return ascii_matrix


# Prints ascii matrix to terminal
def display_ascii(ascii_matrix, image=None):

    if image:
        frame = ''
        for y in range(len(ascii_matrix)):
            for x in range(len(ascii_matrix[0])):
                R = str((image.getpixel((x, y)))[0])
                G = str((image.getpixel((x, y)))[1])
                B = str((image.getpixel((x, y)))[2])
                color_code = '\033[38;2;' + R + ';' + G + ';' + B + 'm'

                frame += color_code
                frame += ascii_matrix[y][x] * 3

            frame += '\n'
        print(frame)
    else:
        for y in range(len(ascii_matrix)):
            line = ''
            for x in range(len(ascii_matrix[0])):
                line += ascii_matrix[y][x] * 3

            print(line)


# Writes ascii matrix to text file
def write_to_file(ascii_matrix, file_name="output.txt"):
    f = open(file_name, 'w')

    for y in range(len(ascii_matrix)):
        line = ''
        for x in range(len(ascii_matrix[0])):
            line += ascii_matrix[y][x] * 3

        line += "\n"
        f.write(line)

    f.close()


# Creates image frames from video
def display_video(vid_name):
    cam = cv2.VideoCapture(vid_name)

    try:
        if not os.path.exists('data'):
            os.makedirs('data')

        if not os.path.exists('data/' + vid_name):
            os.makedirs('data/' + vid_name)

        if not os.path.exists('data/' + vid_name + '/ascii_frames'):
            os.makedirs('data/' + vid_name + '/ascii_frames')

    except OSError:
        print('Error: Creating directory')

    current_frame = 0

    while (True):

        # reading from frame
        ret, frame = cam.read()

        if ret:
            # if video is still left continue creating images
            name = './data/' + vid_name + '/frame' + str(current_frame) + '.jpg'
            print('Creating...' + name)

            # writing the extracted images
            cv2.imwrite(name, frame)

            # increasing counter so that it will
            # show how many frames are created
            current_frame += 1
        else:
            break

    total_frames = current_frame

    # Release all space and windows once done
    cam.release()
    cv2.destroyAllWindows()

    for frame in range(total_frames):
        frame_name = './data/' + vid_name + '/frame' + str(frame) + '.jpg'
        im = Image.open(frame_name)
        max_size = (os.get_terminal_size()[0], os.get_terminal_size()[1])
        im.thumbnail(max_size, Image.ANTIALIAS)
        greyscaled = im.convert("L")
        brightness_matrix = luminosity_brightness(greyscaled)
        ascii_matrix = map_to_ascii(brightness_matrix, "ascii-color")

        f = open('./data/' + vid_name + '/ascii_frames/frame' + str(frame) + '.txt', 'w')
        for y in range(len(ascii_matrix)):
            line = ''
            for x in range(len(ascii_matrix[0])):
                R = str((im.getpixel((x, y)))[0])
                G = str((im.getpixel((x, y)))[1])
                B = str((im.getpixel((x, y)))[2])
                color_code = '\033[38;2;' + R + ';' + G + ';' + B + 'm'
                line += color_code
                line += ascii_matrix[y][x] * 3

            line += "\n"
            f.write(line)

        f.close()

    filenames = []
    frames = []
    for frame in range(total_frames):
        filenames.append('./data/' + vid_name + '/ascii_frames/frame' + str(frame) + '.txt')

    for name in filenames:
        with open(name, "r", encoding="utf8") as f:
            frames.append(f.readlines())

    while True:
        for frame in frames:
            print("".join(frame))
            time.sleep(1/60)
            os.system('cls')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("image", help="Set image to convert")
    parser.add_argument("--size", "-s", type=int, help="Set size which image is scaled down to")
    parser.add_argument("--output", "-o", help="Save ascii image to text file")
    parser.add_argument("--strategy", "-S", help="Set strategy to use for rendering", choices=['filled-ascii', 'just-ascii', 'ascii-color'])
    parser.add_argument("--invert", "-i", help="Invert image brightness", action="store_true")
    parser.add_argument("--luminosity", "-l", help="Set brightness mode to luminosity", action="store_true")
    parser.add_argument("--average", "-a", help="Set brightness mode to average", action="store_true")
    parser.add_argument("--color", "-c", help="Print in full color", action="store_true")
    parser.add_argument("--video", "-v", help="Set to video mode", action="store_true")

    args = parser.parse_args()
    if args.video:
        display_video(args.image)
    else:
        # Load image and scale down
        im = Image.open(args.image)
        if args.size:
            max_size = (args.size, args.size)
        elif im.width > os.get_terminal_size()[0]:
            max_size = (os.get_terminal_size()[0], os.get_terminal_size()[1])
        else:
            max_size = (256, 256)
        im.thumbnail(max_size, Image.ANTIALIAS)

        if args.average:
            brightness_matrix = averaged_brightness(im)
        else:
            greyscaled = im.convert("L")
            brightness_matrix = luminosity_brightness(greyscaled)

        if args.invert:
            ascii_matrix = map_to_ascii(brightness_matrix, args.strategy, "invert")
        else:
            ascii_matrix = map_to_ascii(brightness_matrix, args.strategy)

        if args.output:
            write_to_file(ascii_matrix, args.output)

        if args.color:
            display_ascii(ascii_matrix, im)
        else:
            display_ascii(ascii_matrix)




